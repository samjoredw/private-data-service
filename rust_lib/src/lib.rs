// Simple Laplace DP generated by ChatGPT:
use rand::Rng;
use std::f32::consts::E;

/// Adds Laplace noise for Differential Privacy
fn laplace_noise(sensitivity: f32, epsilon: f32) -> f32 {
    let lambda = sensitivity / epsilon; // Scale parameter
    let mut rng = rand::thread_rng();
    
    // Generate random float in range [-0.5, 0.5]
    let u: f32 = rng.gen::<f32>() - 0.5;

    // Apply Laplace mechanism formula
    -lambda * u.signum() * (1.0 - 2.0 * u.abs()).ln()
}

/// Exposed function for calculating privacy loss with noise
#[no_mangle]
pub extern "C" fn calculate_privacy_loss(precision: f32) -> f32 {
    let base_loss = 100.0 / (precision + 1.0); // Base formula
    let sensitivity = 1.0; // Sensitivity is 1 for simplicity
    let epsilon = 1.0; // Privacy budget, adjust as needed

    let noise = laplace_noise(sensitivity, epsilon);
    base_loss + noise // Add Laplace noise to the base loss
}

